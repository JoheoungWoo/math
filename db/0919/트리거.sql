BEGIN
  FOR t IN (SELECT table_name FROM user_tables
            WHERE table_name IN ('DEPT_TR','EMP_TR','EMP_AUDIT')) LOOP
    EXECUTE IMMEDIATE 'DROP TABLE '||t.table_name||' CASCADE CONSTRAINTS PURGE';
  END LOOP;

  FOR s IN (SELECT sequence_name FROM user_sequences
            WHERE sequence_name='EMP_SEQ') LOOP
    EXECUTE IMMEDIATE 'DROP SEQUENCE '||s.sequence_name;
  END LOOP;

  FOR tr IN (SELECT trigger_name FROM user_triggers
             WHERE trigger_name IN ('TR_EMP_BI_SEQ','TR_EMP_AUDIT',
                                    'TR_EMP_SALARY_CHECK','TR_EMP_BLOCK_WEEKEND',
                                    'TR_EMP_TOTAL_BY_DEPT','TR_V_EMP_DEPT_IU')) LOOP
    EXECUTE IMMEDIATE 'DROP TRIGGER '||tr.trigger_name;
  END LOOP;
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE DEPT_TR (
  DEPTNO       NUMBER PRIMARY KEY,
  DNAME        VARCHAR2(50),
  TOTAL_SALARY NUMBER DEFAULT 0
);

CREATE TABLE EMP_TR (
  EMPNO      NUMBER PRIMARY KEY,
  ENAME      VARCHAR2(50),
  DEPTNO     NUMBER REFERENCES DEPT_TR(DEPTNO),
  SAL        NUMBER CHECK (SAL >= 0),
  CREATED_AT DATE DEFAULT SYSDATE
);

CREATE SEQUENCE EMP_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER TR_EMP_BI_SEQ
BEFORE INSERT ON EMP_TR
FOR EACH ROW
WHEN (NEW.EMPNO IS NULL)
BEGIN
  :NEW.EMPNO := EMP_SEQ.NEXTVAL;
END;
/

INSERT INTO DEPT_TR(DEPTNO, DNAME) VALUES (10, 'DEV');
INSERT INTO EMP_TR(ENAME, DEPTNO, SAL) VALUES ('ALICE', 10, 3000);
SELECT * FROM EMP_TR;

CREATE TABLE EMP_AUDIT (
  AUDIT_ID NUMBER GENERATED ALWAYS AS IDENTITY,
  EMPNO    NUMBER,
  ACTION   VARCHAR2(10),
  OLD_SAL  NUMBER,
  NEW_SAL  NUMBER,
  WHO      VARCHAR2(30),
  WHEN_TS  TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE OR REPLACE TRIGGER TR_EMP_AUDIT
AFTER INSERT OR UPDATE OR DELETE ON EMP_TR
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    INSERT INTO EMP_AUDIT (EMPNO, ACTION, NEW_SAL, WHO)
    VALUES (:NEW.EMPNO, 'INSERT', :NEW.SAL, SYS_CONTEXT('USERENV','SESSION_USER'));
  ELSIF UPDATING THEN
    INSERT INTO EMP_AUDIT (EMPNO, ACTION, OLD_SAL, NEW_SAL, WHO)
    VALUES (:NEW.EMPNO, 'UPDATE', :OLD.SAL, :NEW.SAL, SYS_CONTEXT('USERENV','SESSION_USER'));
  ELSIF DELETING THEN
    INSERT INTO EMP_AUDIT (EMPNO, ACTION, OLD_SAL, WHO)
    VALUES (:OLD.EMPNO, 'DELETE', :OLD.SAL, SYS_CONTEXT('USERENV','SESSION_USER'));
  END IF;
END;
/
UPDATE EMP_TR SET SAL = 3300 WHERE ENAME='ALICE';
DELETE FROM EMP_TR WHERE ENAME='ALICE';
SELECT ACTION, EMPNO, OLD_SAL, NEW_SAL, WHO, WHEN_TS FROM EMP_AUDIT ORDER BY AUDIT_ID;
CREATE OR REPLACE TRIGGER TR_EMP_SALARY_CHECK
BEFORE UPDATE OF SAL ON EMP_TR
FOR EACH ROW
WHEN (NEW.SAL IS NOT NULL AND OLD.SAL IS NOT NULL)
DECLARE
  l_ratio NUMBER;
BEGIN
  l_ratio := (:NEW.SAL - :OLD.SAL) / NULLIF(:OLD.SAL,0);
  IF l_ratio > 0.2 THEN
    RAISE_APPLICATION_ERROR(-20001, '급여는 한 번에 20%를 넘게 올릴 수 없습니다.');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_EMP_TOTAL_BY_DEPT
AFTER INSERT OR UPDATE OF SAL, DEPTNO OR DELETE ON EMP_TR
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    UPDATE DEPT_TR SET TOTAL_SALARY = NVL(TOTAL_SALARY,0) + :NEW.SAL
    WHERE DEPTNO = :NEW.DEPTNO;

  ELSIF DELETING THEN
    UPDATE DEPT_TR SET TOTAL_SALARY = NVL(TOTAL_SALARY,0) - :OLD.SAL
    WHERE DEPTNO = :OLD.DEPTNO;

  ELSIF UPDATING THEN
    IF :NEW.DEPTNO = :OLD.DEPTNO THEN
      UPDATE DEPT_TR
         SET TOTAL_SALARY = NVL(TOTAL_SALARY,0) + (:NEW.SAL - :OLD.SAL)
       WHERE DEPTNO = :NEW.DEPTNO;
    ELSE
      UPDATE DEPT_TR SET TOTAL_SALARY = NVL(TOTAL_SALARY,0) - :OLD.SAL
       WHERE DEPTNO = :OLD.DEPTNO;
      UPDATE DEPT_TR SET TOTAL_SALARY = NVL(TOTAL_SALARY,0) + :NEW.SAL
       WHERE DEPTNO = :NEW.DEPTNO;
    END IF;
  END IF;
END;
/

CREATE OR REPLACE VIEW V_EMP_DEPT AS
SELECT e.EMPNO, e.ENAME, e.SAL, d.DEPTNO, d.DNAME
FROM EMP_TR e JOIN DEPT_TR d ON e.DEPTNO = d.DEPTNO;

-- 뷰에서 SAL/ENAME만 수정 허용
CREATE OR REPLACE TRIGGER TR_V_EMP_DEPT_IU
INSTEAD OF UPDATE ON V_EMP_DEPT
FOR EACH ROW
BEGIN
  UPDATE EMP_TR
     SET ENAME = :NEW.ENAME,
         SAL   = :NEW.SAL
   WHERE EMPNO = :OLD.EMPNO;
END;
/

SELECT * FROM V_EMP_DEPT;
UPDATE V_EMP_DEPT SET SAL = SAL + 100 WHERE ENAME='BOB';
SELECT * FROM EMP_TR WHERE ENAME='BOB';

-- 내 트리거 목록
SELECT TRIGGER_NAME, TABLE_NAME, TRIGGERING_EVENT, STATUS
FROM USER_TRIGGERS;

-- 비활성/활성
ALTER TRIGGER TR_EMP_SALARY_CHECK DISABLE;
ALTER TRIGGER TR_EMP_SALARY_CHECK ENABLE;

-- 테이블 단위로 모두 비활성/활성
ALTER TABLE EMP_TR DISABLE ALL TRIGGERS;
ALTER TABLE EMP_TR ENABLE  ALL TRIGGERS;










